//console.log("안녕하세요. js파일입니다.", "두 번째");


//------------
//변수
//------------
//var : 중복 선언 가능, 재할당 가능, 함수레벨 스코프
// var u_name = "홍길동";
// var u_name = "갑순이";
// u_name = "갑돌이";
// console.log( u_name );


// let : 중복 선언 불가능, 재할당 가능, 블록레벨 스코프
// let u_age = 20;
// u_age = 30;


// const : 상수 : 중복 선언 불가능, 재할당 불가능, 블록레벨 스코프
// 값이 바뀌지 않음, 재할당이 안 됨 php면 에러 뱉어내는데 자바스크립트는
// 에러를 뱉어내지 않음.
// const gender = "남자";
// gender = "여자";


//-------------
// 스코프
//-------------
// php가 변수를 함수 안 밖 다 선언했는데 특정 조건문 안에서도 선언
// 어떤 때는 사용 가능 어떤 때는 사용 불가능하였는데 스코프와 연관됨


// 전역 스코프 - 어디서든지 사용 가능한 스코프
let u_name = "홍길동"; //조심해서 사용해야 함 php보다 조심해야 함
// 함수에도 접근 가능 밖에서 접근 가능 어디서든 접근 가능
// let이니까 재선언은 불가 다른데서 u_name으로 선언하는 순간 에러가 남
// 전역스코프는 되도록 사용하지 않는 방향으로 가야 함 에러를 줄일 수 있음
// function test() {
//     console.log(u_name);
// }


// 함수레벨 스코프 - var는 함수레벨 스코프이다
function test() {
    console.log(u_name);
    let u_age = 30;
    console.log(u_age);
}


// 블록레벨 스코프
// let이 블록레벨 스코프를 가진다 중괄호를 블록이라고 함
// 중괄호 안에서만 사용 가능함
function test1() {
   let v_test1 = "함수 : 테스트1";
   if( true ){
    //    let v_test1 = "함수 : 테스트1";
       var v_var1 = "var로 선언";
    }
      console.log(v_test1);
//    console.log(v_var1);
}
// 사용할 변수는 최상단에 선언해두고 사용하면 블록레벨 신경 안 쓰고 사용 가능
// 함수 내의 최상단을 얘기하는 것임 (전역 스코프 얘기 아님)
// 자바스크립트는 카멜 기법으로 씀 스네이크 기법은 PHP에서 사용
// 하지만 사용하는데 상관은 없다. 네이밍 규칙은 프로젝트마다
// 조금씩 달라지기 때문에 참고하고 그때그떄 사용
// var로 선언했을 때는 function test1 안에서 다 사용 가능
// let으로 선언했을 떄는 if로 선언된 블록 안에서만 사용 가능