let num = 100;
let arr = [];

// 1. 1~ 입력값의 요소를 가지는 배열을 만들어주세요.

for (let i = 1; i <= num; i++) {
  arr.push(i);
}

// 2. 그 배열에서 소수만 찾아서 새로운 배열을 만들어주세요.

let arrPrime = arr.filter((num) => {     // 4. 필터 사용
  for (let i = 2; i < num; i++) {
    if (num % i === 0) {
      return false;
    }
  }
  return true;
});


/*

let arrPrime = arr.filter(               // 4. 필터 사용
    (num) => 
    {                  
    for (let i = 2; i < num; i++) 
    {
    if (num % i === 0) 
     {
        return false;
     }
    }
    return true;
    }
);

*/


// 3. 그 배열을 alert로 출력해주세요. //alert('경고')

alert(arrPrime);
//---------------------------------------------------------------------
// num 변수에 100을 할당하고, 빈 배열 arr을 선언합니다.
// for 루프를 이용하여 2부터 num까지의 정수를 배열 arr에 추가합니다.
// filter() 메소드를 이용하여 배열 arr에서 소수만 필터링합니다.
// filter() 메소드는 배열을 순회하면서 각 요소에 대해 콜백 함수를 실행하고, 
// 콜백 함수가 true 값을 반환하는 요소들로 이루어진 새로운 배열을 반환합니다.
// 이때 콜백 함수는 매개변수로 현재 순회 중인 요소를 받으며, 
// 소수 여부를 판별하는 코드가 포함되어 있습니다.
// arrPrime 배열을 alert() 메소드를 이용하여 출력합니다.
// - 출력 결과 -
// arrPrime
// (25) [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]
//---------------------------------------------------------------------
// 이전에 작성한 코드에서 if (num % i == 0)가 true일 때 
// arrPrime 배열에 넣지 않았습니다. 즉, 소수가 아닌 수가 arrPrime 배열에 
// 들어가는 것을 막았습니다. 그리고 for 반복문에서 i를 2부터 시작하는 이유는 
// 모든 수는 1과 자기 자신으로 나누어 떨어지므로 1은 제외해도 무방하고, 
// 2보다 작은 수로는 나누어 떨어지지 않기 때문입니다. 따라서 2부터 시작하여 
// num(100) 이전의 모든 수로 나누어 떨어지는지 확인합니다. 이 방법을 이용하여 
// 소수를 찾아낼 수 있습니다. 그리고 filter() 메서드를 사용하여 소수인 요소만 
// 남긴 새로운 배열 arrPrime을 만들고, alert() 메서드를 사용하여 arrPrime 
// 배열을 출력합니다.
//----------------------------------------------------------------------


// 연습하기 //
/*
1. 1 ~ 입력값의 요소를 가지는 배열을 만들어주세요.
    let num = 100;
    let arr = [];

    for(let i = 1; i <= num; i++) {
        arr.push(i);
    }

2. let arrPrime = arr.filter((num)) => {
    for (let i = 2; i <= num; i++) {
        if (num % i === 0) {
            return false;
        }
    }
    return true;
});

alert(arrPrime);
*/


